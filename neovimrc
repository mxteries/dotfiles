nnoremap <SPACE> <Nop>
let mapleader=" "

" Vim-Plug: Download if does not exist
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" ~/.config/nvim/init.vim
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
  let g:coq_settings = { 'auto_start': v:true, 'keymap.jump_to_mark': "<F8>", 'display.pum.fast_close': v:false, 'display.icons.mode': 'none' }

Plug 'TimUntersberger/neogit'
Plug 'lewis6991/gitsigns.nvim'
Plug 'numToStr/FTerm.nvim'
  nnoremap got :lua require('FTerm').run({'cd', vim.fn.expand('%:p:h')})<CR>
  tnoremap <C-h> <C-\><C-n>:lua require("FTerm").toggle()<CR>
  nnoremap <C-h> :lua require("FTerm").toggle()<CR>

Plug 'sainnhe/sonokai'
  let g:sonokai_style = 'maia'
  let g:sonokai_disable_italic_comment = 1
  let g:sonokai_diagnostic_text_highlight = 1

Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'         " status bar
  let g:lightline = {'colorscheme' : 'sonokai'}

Plug 'tpope/vim-surround'            " for adding surrounding characters
Plug 'tpope/vim-repeat'              " for repeating
Plug 'tpope/vim-commentary'          " for commenting
Plug 'justinmk/vim-dirvish'          " :crabs: netrw is gone :crabs:
Plug 'iamcco/markdown-preview.nvim', { 'do': ':call mkdp#util#install()', 'for': 'markdown', 'on': 'MarkdownPreview' }
Plug 'tommcdo/vim-exchange'          " for swapping text
Plug 'tommcdo/vim-lion'
Plug 'hashivim/vim-terraform'

Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
  nnoremap U :UndotreeToggle<CR>
  let g:undotree_WindowLayout = 2
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
  let $FZF_DEFAULT_COMMAND = 'rg --files'
  nnoremap <Leader>r :History:<CR>
  nnoremap <Leader>; :Commands<CR>
  nnoremap <Leader>K :Help<CR>
  nnoremap gb :Bu<CR>
" Rg in the current buffer's directory
command! -bang -nargs=* Rgd
  \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case "
  \ .shellescape(<q-args>), 1, {'dir': expand('%:p:h') }, <bang>0)

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

runtime! ftplugin/man.vim  " Read man pages

" Store everything in the .vim directory
if !isdirectory($HOME."/.vim/ntmp")
    call mkdir($HOME."/.vim/ntmp", "", 0700)
endif
set undofile   " keep an undo file (%home%...%vimrc)
set undodir=~/.vim/ntmp,.
set directory=~/.vim/ntmp,.

" Formatting indents
set softtabstop=4 shiftwidth=4 expandtab  " use spaces
set autoindent
set copyindent  " copy previous indenting when auto indenting
set backspace=indent,eol,start
set listchars=tab:>-,trail:.  " configure list
set list  " show information about spaces and tabs

" Formatting search
set path=.,**,,  " exclude /usr/include and search ** by default
autocmd FileType c,cpp      setlocal path+=/usr/include
" ignore patterns (node_modules) for :find
set wildignore+=tags,*/node_modules/*,*.o,*.class,*/__pycache__,*/tools/*
set ignorecase " ignore case when searching
set smartcase  " unless the search has capital letters
set incsearch  " show search as you type
set hlsearch   " highlight search (clear with :noh or <C-L> mapping)

" misc QOL
if exists('+clipboard')
    set clipboard=unnamedplus
endif
set guicursor=i:block
set autowrite
set hidden          " For allowing hiding of unsaved files in our buffer
set ruler
set wildmode=longest:full:lastused,full " zsh tab behavior + "lastused"
set splitbelow
set splitright
set updatetime=250  " for git gutter update
set cursorline
set linebreak       " more readable text wrapping

" Enable mouse for scrolling and clicking, but disable all selection
set mouse=nv
noremap <LeftRelease> <Nop>
" Mappings
nnoremap Y y$
nnoremap <BS> <C-^>
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
inoremap <C-A> <C-O>^
inoremap <C-E> <C-O>$
" vnoremap P "0p
nnoremap <leader>cc :cclose<bar>lclose<cr>
nnoremap <Leader>cd :tcd %:p:h<CR>:pwd<CR>
nnoremap <Leader>cg :tcd `git rev-parse --show-toplevel`<CR>:pwd<CR>
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>

" Have cake files use c# syntax
autocmd BufRead,BufNewFile *.cake set filetype=cs
" Auto remove trailing spaces
autocmd BufWritePre * %s/\s\+$//e

" Terminal themes and colors:
" Enable true color
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set background=dark

" colorscheme gruvbox
colorscheme sonokai
